#!/bin/sh
# File: get-sources
__inputdir="${rpmbuilddir}/SOURCES"
test -z "${rpmbuilddir}" && __inputdir="${debdir}"
sha256sumfile="${__inputdir}/${package}-${version}/usr/share/${package}/inc/sha256sum.txt"
localsourcedir="${__inputdir}/${package}-${version}/usr/share/${package}/source"

clean_getsources() {
   rm -rf "${gs_tmpdir:-NOTHINGTODELETE}" 1>/dev/null 2>&1
   test -n "${1}" && exit "$1"
}

getsource() {
   # call: getsource ~/rpmbuilddir/SOURCES/filename.tar.gz http://sourcefile/file.tar.gz http://sourcealt1/file.tar.gz
   # will check the sha256sum file to ensure good download

   local destfile="${1}" ; shift
   local sourceurl1="${1}"
   local sourceurl2="${2}"
   local sourceurl3="${3}"
   local sourceurl4="${4}"
   local origsourceurl="${sourceurl1}" ; sourceurl="${sourceurl1}"; local thissu=1
   local destfileshort=$( echo "${destfile}" | sed -e 's/^.*\///;' )
   local goodsha=$( awk "\$2 == \"${destfileshort}\" {print;}" ${sha256sumfile} 2>/dev/null | cut -d' ' -f1 )

   touch "${destfile}" 2>/dev/null || { echo "Cannot modify ${destfile}. Run as root, perhaps. Aborted."; exit 1; }
   local attempts=0
   local thesecurlopts=""
   local canconnect=0 ; local td=""
   test -f "${localsourcedir}/${destfileshort}" && cp -pf "${localsourcedir}/${destfileshort}" "${destfile}"
   thissha=$( sha256sum "${destfile}" 2>/dev/null | cut -d' ' -f1 )
   if ! test "${thissha}" = "${goodsha}";
   then
      echo "Fetching ${sourceurl}"
      while test ${attempts} -le 6;
      do
         oldtd="${td}"
         td="$( echo "${sourceurl}" | cut -d'/' -f3 | cut -d':' -f1 )"
         ! test "${oldtd}" = "${td}" && { nslookup -timeout=3 "${td}" 1>/dev/null 2>&1 && canconnect=1 ; }
         { test ${canconnect} -gt 0 && curl -L "${sourceurl}" ${thesecurlopts} --progress-bar --refer "${sourceurl}" > "${destfile}"; } 2>&1 | grep -viE 'certificate|the domain name|^\s*$|ssl|insecure|cacert|bundle'
         # verify good download
         thissha=$( sha256sum "${destfile}" 2>/dev/null | cut -d' ' -f1 )
         if ! test -f "${destfile}" || test "$( stat -c "%s" "${destfile}" 2>/dev/null )" -lt 1000 || ! test "${thissha}" = "${goodsha}";
         then
            case "${attempts}" in
            1) test "$( ps -p $$ | xargs | awk '{print $NF}')" = "bash" && test -x /usr/bin/bp && . /usr/bin/bp --noclear --noglobalprofile 1>/dev/null 2>&1;;
            2) unset http_proxy; unset https_proxy;;
            3)
               # ignore certificate errors
               thesecurlopts="-k"
               # possibility: do a regex substitution like the old install-ffs.sh script does, to point to an alternate server
               ;;
            4)
               # try removing the ssl
               thesecurlopts=""
               sourceurl="$( echo "${sourceurl}" | sed -r -e 's4(ht|f)tps:\/\/4\1tp:\/\/4;' )"
               ;;
            5)
               # reset attempts, rotate to sourceurl1 and so on
               thissu=$(( thissu + 1 ))
               eval newsourceurl=\${sourceurl${thissu}}
               test -n "${newsourceurl}" && { sourceurl="${newsourceurl}" ; attempts=0 ; }
               ;;
            6) echo "File failed to download: ${origsourceurl}. Aborted." && exit 1;;
            esac
         else
            # shortcircuit because the sha256 sum matches
            break
        fi
        attempts=$(( attempts + 1 ))
      done
   fi
}

# Define all %global variables as shell variables as well as in the sed script
gs_tmpdir="$( mktemp -d )"

# unfortunately the trap statements ruins the rpmbuild command
#trap 'trap "" 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ; clean_getsources "$?" ;' 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
tmpfile1="$( TMPDIR="${gs_tmpdir}" mktemp )"
filterfile1="$( TMPDIR="${gs_tmpdir}" mktemp )"
grep -E "^\s*%global" "${__inputdir}/${packagespecfile}" | awk '{$1="";$2=$2"=";print;}' | sed -r -e 's/\s*=\s*/=/g;' -e 's/^\s*//;' > "${tmpfile1}"
. "${tmpfile1}"
sed -r -e 's4^4s/%\\{4;' -e 's/=/\\}\//;' -e 's4$4\/g;4;' "${tmpfile1}" > "${filterfile1}"

# Get additional ones that are harder to fetch
#dist="$( rpm --showrc | grep -E "dist\s*\." | awk '{print $3}' )"
dist="$( rpm -E '%{dist}' 2>/dev/null )"

# Interpret the rpm spec file and download to ~/rpmbuild/SOURCES all the Source[0-9]?: files.
getthesefiles1="$( TMPDIR="${gs_tmpdir}" mktemp )"
pushd "${__inputdir}" 1>/dev/null 2>&1
grep -E "^\s*Source.?:" "${__inputdir}/${packagespecfile}" | \
   awk '{$1="";print;}' | \
   sed -r -e "
s/%\{name\}/${package}/g;
s/%\{version\}/${shortversion}/g;
s/%\{\??dist\}/${dist}/g;
s/^\s*//;
" -f "${filterfile1}" | \
# limit to only remote sources
   grep -iE "(https?|ftps?)" > "${getthesefiles1}"

# remove local copy if already exists
#sed 's4^.*\/44' "${getthesefiles1}" | xargs -n1 -I'[]' rm -f [] 2>/dev/null

# download sources
__x=0
while read line;
do
   __x=$(( __x + 1 ))
   # any additional transformations should be alturl2, etc. and added to the getsource call in a few lines
   alturl1="$( echo "${line}" | sed -r -e 's/albion320\.no-ip\.biz\//storage1:180\//;' )"

   destfile="${__inputdir}/$( echo "${line}" | sed -r -e 's4^.*\/44;' )"
   #getsource "${line}" "${destfile}"
   getsource "${destfile}" $( echo "${line}" "${alturl1}" | xargs -n1 | awk '!x[$0]++' | xargs )

   # If it is a .patch file, save it to usr/share/${package}/source
   if echo "${destfile}" | grep -qiE "\.patch" ;
   then
      /bin/cp -pf "${destfile}" "${__inputdir}/${package}-${version}/usr/share/${package}/source/"
   fi

   # If building a deb, update the rules file
   if test -n "${debdir}" ;
   then
      set -x
      echo "FINDTHIS"
      sed -i -r -e "/^\s*#.*@NO_MORE_SOURCES\s*$/iSOURCE${__x}=\"${destfile}\"
" "${debdir}/${package}-${version}/usr/share/${package}/build/debian-${package}/rules"
   fi

done < "${getthesefiles1}"

popd 1>/dev/null 2>&1;

#trap '' 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
clean_getsources ""
