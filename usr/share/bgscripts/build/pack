#!/bin/bash

# DETERMINE LOCATION OF FRAMEWORK
while read flocation; do if test -x ${flocation} && test "$( ${flocation} --fcheck )" -ge 20170111; then frameworkscript="${flocation}"; break; fi; done <<EOFLOCATIONS
/usr/local/share/bgscripts/framework.sh
/usr/share/bgscripts/framework.sh
../framework.sh
usr/share/bgscripts/framework.sh
~/rpmbuild/SOURCES/bgscripts-1.1-31/usr/share/bgscripts/framework.sh
EOFLOCATIONS
test -z "${frameworkscript}" && echo "$0: framework not found. Aborted." 1>&2 && exit 4

. ${frameworkscript} || echo "$0: framework did not run properly. Continuing..." 1>&2

type="";

case "${thisflavor}" in
   redhat|rhel|centos|fedora|korora) type=rpm;;
   debian|ubuntu) type=dpkg;;
   GENERIC) type=freebsd;;
   *) type=targz;;
esac

echo " $@ " | grep -qiE -- "help|usage|\s-h\s|\s-\?" 1>/dev/null 2>&1 && {
   # display help and exit
   less -F <<EOF
pack utility version 2018-02-24a-bgscripts
usage: pack [ rpm | deb | tar | scrub ] [ --debug | -d {0-10} ]
Provides a single command for building a package. This script is customized to each package.
optional arguments:
 [ rpm | deb | tar | scrub | bsd ]    Build that type of package. Scrub calls the scrub.py script.
                                The default depends on the local os flavor. This system is "${thisflavor}"
 [ --debug {0-10} | -d {0-10} ] Display package type to build and exit. Debuglev not implemented here.
EOF
exit 1
}

# Derive package name and version number, for my simple package versions only.
fullname="$( pwd | sed -r -e 's/.*(SOURCES|deb)\///;s/\/.*//;' )"
version="$( echo "${fullname}" | grep -oiE -- "-[0-9]{0,3}(\.[0-9a-zA-Z]{0,5})+-[0-9]{0,4}" | sed -e 's/^-//;' )"
shortversion="$( echo "${version}" | sed -r -e 's/-.+$//;' )"
package="$( echo "${fullname}" | sed -e "s/-${version}//;" )"

echo " $@ " | grep -qiE -- "rpm|rhel|redhat|centos|fedora|korora" 1>/dev/null 2>&1 && type=rpm
echo " $@ " | grep -qiE -- "debian|ubuntu|deb\s|dpkg" 1>/dev/null 2>&1 && type=dpkg
echo " $@ " | grep -qiE -- "freebsd|\bbsd\b" 1>/dev/null 2>&1 && type=freebsd
echo " $@ " | grep -qiE -- "tar|tgz|gz" 1>/dev/null 2>&1 && type=targz
echo " $@ " | grep -qiE -- "scrub" 1>/dev/null 2>&1 && type=scrub

# Display information
echo "packaging ${package}-${version} as ${type}"
echo " $@ " | grep -qiE -- "debug|\s-d[ 0-9]{0,3}\s" 1>/dev/null 2>&1 && exit 0

case "${type}" in
   rpm)

########## PACKAGING for rhel family
# if you copy-paste this, be sure to define package, version, shortversion
rpmbuilddir=~/rpmbuild
sub1="core"
packagespecfile="${package}-${version}/usr/share/${package}/build/${package}.spec"
#. "${rpmbuilddir}/SOURCES/${package}-${version}/usr/share/${package}/build/get-sources"
sed -n -e '1,/^\%files$/p;' "${rpmbuilddir}/SOURCES/${packagespecfile}" > "${rpmbuilddir}/SOURCES/${packagespecfile}.$$.swp" # removes files and changelog
cd "${rpmbuilddir}/SOURCES/${package}-${version}"
"${rpmbuilddir}/SOURCES/${package}-${version}/usr/share/${package}/build/get-files" rpm >> "${rpmbuilddir}/SOURCES/${packagespecfile}.$$.swp"
{ printf "\n%%files ${sub1}\n" ; "${rpmbuilddir}/SOURCES/${package}-${version}/usr/share/${package}/build/get-files-${sub1}" rpm ; } >> "${rpmbuilddir}/SOURCES/${packagespecfile}.$$.swp"
{ printf '\n'; sed -n -e '/^\%changelog/,$p' "${rpmbuilddir}/SOURCES/${packagespecfile}"; } >> "${rpmbuilddir}/SOURCES/${packagespecfile}.$$.swp"
mv -f "${rpmbuilddir}/SOURCES/${packagespecfile}.$$.swp" "${rpmbuilddir}/SOURCES/${packagespecfile}"
rm -rf "${rpmbuilddir}/SOURCES/${package}-${shortversion}"; cp -prf "${rpmbuilddir}/SOURCES/${package}-${version}" "${rpmbuilddir}/SOURCES/${package}-${shortversion}"
rm -rf "${rpmbuilddir}/SOURCES/${package}-${shortversion}/DEBIAN"
cd "${rpmbuilddir}/SOURCES"
rm -rf "${package}.tgz"; tar -zc --exclude='.git*' --exclude='./README.md' -f "${package}.tgz" "${package}-${shortversion}"
cp -p "${rpmbuilddir}/SOURCES/${packagespecfile}" "${rpmbuilddir}/SPECS"
mkdir -p "${rpmbuilddir}/RPMS/noarch"; cd "${rpmbuilddir}/RPMS/noarch"
rpmbuild -bb "${rpmbuilddir}/SPECS/${package}.spec"
rm -rf "${rpmbuilddir}/SOURCES/${package}-${shortversion}/" "${rpmbuilddir}/SOURCES/${package}.tgz"

      ;;
   dpkg)

########## PACKAGING for debian family
# You need package dpkg-dev to build packages.
# if you copy-paste this, be sure to define package, version
debdir=~/deb
sub1="core"
debiandirmain="${package}-${version}/usr/share/${package}/build/debian-${package}"
debiandirsub1="${package}-${version}/usr/share/${package}/build/debian-${package}-${sub1}"
# get-sources needs the spec file
#packagespecfile="${package}-${version}/usr/share/${package}/build/${package}.spec"
#sed -i -r -e '/@INSERT_SOURCES/,/@NO_MORE_SOURCES/{/^SOURCE/d}' "${debdir}/${package}-${version}/usr/share/${package}/build/debian-${package}/rules"
#. "${debdir}/${package}-${version}/usr/share/${package}/build/get-sources"
cd "${debdir}/${package}-${version}"
"${debdir}/${package}-${version}/usr/share/${package}/build/get-files" deb | xargs -d'\0' md5sum > "${debdir}/${debiandirmain}/md5sums"
"${debdir}/${package}-${version}/usr/share/${package}/build/get-files-${sub1}" deb | xargs -d'\0' md5sum > "${debdir}/${debiandirsub1}/md5sums"

# sub1
rm -rf "${debdir}/${package}-${version}/DEBIAN" 2>/dev/null; mkdir -p "${debdir}/${package}-${version}/DEBIAN"
cp -pf "${debdir}/${debiandirsub1}"/* "${debdir}/${package}-${version}/DEBIAN/"
mkdir "${debdir}/${package}" 2>/dev/null; rm -rf "${debdir}/${package}_${shortversion}.orig.tar.gz"
tar -zc --exclude='.git*' --exclude='README.md' -f "${debdir}/${package}_${shortversion}.orig.tar.gz" -C "${debdir}/${package}-${version}" $( awk '{print $2}' "${debdir}/${package}-${version}/DEBIAN/md5sums" ) $( find "${debdir}/${package}-${version}" -mindepth 1 -type d ! -regex '.*\/.git.*' -printf '%P\n' )
tar -zx -C "${debdir}/${package}" -f "${debdir}/${package}-${shortversion}.orig.tar.gz"
#pushd "${debdir}/${package}"
#"DEBIAN/rules"
fakeroot dpkg-deb -b "${debdir}/${package}"
#popd
mv -f "${debdir}/${package}.deb" "${debdir}/${package}-${sub1}-${version}.deb"
rm -rf "${debdir}/${package}_${version}.orig.tar.gz" "${debdir}/${package}"

# main
rm -rf "${debdir}/${package}-${version}/DEBIAN" 2>/dev/null; mkdir -p "${debdir}/${package}-${version}/DEBIAN/"
cp -pf "${debdir}/${debiandirmain}"/* "${debdir}/${package}-${version}/DEBIAN/"
mkdir "${debdir}/${package}" 2>/dev/null; rm -rf "${debdir}/${package}_${shortversion}.orig.tar.gz"
tar -zc --exclude='.git*' --exclude='README.md' -f "${debdir}/${package}_${shortversion}.orig.tar.gz" -C "${debdir}/${package}-${version}" $( awk '{print $2}' "${debdir}/${package}-${version}/DEBIAN/md5sums" ) $( find "${debdir}/${package}-${version}" -mindepth 1 -type d ! -regex '.*\/.git.*' -printf '%P\n' )
tar -zx -C "${debdir}/${package}" -f "${debdir}/${package}_${version}.orig.tar.gz"
#pushd "${debdir}/${package}"
#"DEBIAN/rules"
fakeroot dpkg-deb -b "${debdir}/${package}"
#popd
mv -f "${debdir}/${package}.deb" "${debdir}/${package}-${version}.deb"
rm -rf "${debdir}/${package}_${shortversion}.orig.tar.gz" "${debdir:-~/deb}/${package}" "${debdir}/${package}-${version}/DEBIAN"

      ;;
   targz)

########## PACKAGING in a master.tgz
# if you copy-paste this, be sure to define package, version
cd ~/deb 2>/dev/null || cd ~/rpmbuild/SOURCES
rm -rf ./"${package}-${version}".master.tgz
tar -zcf "${package}-${version}".master.tgz "${package}-${version}"/

      ;;
   freebsd)

########## PACKAGING in a freebsd-ready package-1.0-0-freebsd.tgz
# will be able to be unzipped to /usr/local
# if you copy-paste this, be sure to define package, version
devdir=~/dev
cd "$( find ~ -maxdepth 3 -type d -name "${package}-${version}" 2>/dev/null | head -n1 )"
sourcedir="$( readlink -f . )"
builddir="${devdir}/${package}-${version}-freebsd"
#echo "sourcedir=${sourcedir}"
#echo "builddir=${builddir}"
#echo '---------------------'
mkdir -p "${builddir}/usr/local" 
rsync -rlptgoD "${sourcedir}/" "${builddir}" --exclude='.git*' --exclude 'DEBIAN' --exclude '__pycache__'
mv "${builddir}/usr/"* "${builddir}/usr/local" 2>&1 | grep -vE 'to a subdirectory of itself' 1>&2
for word in etc include info lib libdata libexec man sbin share var ;
do
   test -d "${builddir}/${word}" && mv "${builddir}/${word}" "${builddir}/usr/local"
done
sudo chown 0:0 -R "${builddir}"
cd "${builddir}" ; sudo tar -zcf "${devdir}/${package}-${version}-freebsd.tgz" usr/
cd "${devdir}" ; sudo rm -rf "${builddir}"
outfile="$( find "${devdir}/${package}-${version}-freebsd.tgz" 2>/dev/null )"
test -f "${outfile}" && echo "freebsd tarball built at ${outfile}"

      ;;
   scrub)

########## SCRUB for publication
# if you copy-paste this, be sure to define package, version
cd ~/deb 2>/dev/null || cd ~/rpmbuild/SOURCES
cd "$( find . -name "*scrub.txt" | grep -iE "${package}-${version}\/" | xargs dirname )"
/usr/share/bgscripts/py/scrub.py

      ;;
   unknown)
      echo "error: check $0 for errors on type ${type}." 1>&2
      ;;
esac
